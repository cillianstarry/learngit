git config --global user.name "Your Name"                   git config --global user.name "chchen"
git config --global user.email "email@example.com"          git config --global user.email "chchen822@163.com"

创建版本库
git init


创建SSH KEY   公钥和私钥
ssh-keygen -t rsa -C "youremail@example.com"

关联自己github
git remote add origin git@github.com:cillianstarry/learngit.git

把本地库完全推送到远程库
git push -u origin master

克隆远程库
git clone git@github.com:cillianstarry/learngit.git

--add by hang 20180527
git add 文件名           从工作区提交到暂存区
git commit -m "备注"   从暂存区提交到Master分支

查看工作区和版本库差异
git diff HEAD -- 文件名

git checkout --   撤销工作区修改  用版本库的内容替换工作区的内容
git reset HEAD    撤销暂存区修改  git commit的逆转

分支
git checkout -b dev  创建并切换分支

git branch  （name）查看当前分支，创建分支

git checkout 切换分支

git merge 合并分支
git branch -d 删除分支


当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图。

Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。


修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

